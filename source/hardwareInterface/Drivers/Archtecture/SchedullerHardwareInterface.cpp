/*
 * SchedullerHardwareInterface.cpp
 *
 *  Created on: 8 de ago de 2020
 *      Author: breno
 */

#include "SchedullerHardwareInterface.h"

using namespace DRIVERS;

#define portFLAGS_INT_ENABLED					( ( SchedullerHardwareInterface::StackType ) 0x80 )

/*
 * See header file for description.
 */
SchedullerHardwareInterface::StackType * SchedullerHardwareInterface::initStack( SchedullerHardwareInterface::StackType *pxTopOfStack, SchedullerHardwareInterface::ThreadFunc pxCode, void *pvParameters )
{
	uint16 usAddress;

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
	pxTopOfStack--;

	/* Simulate how the stack would look after a call to vPortYield() generated by
	the compiler. */

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16 ) pxCode;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) ( usAddress & ( uint16 ) 0x00ff );
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) ( usAddress & ( uint16 ) 0x00ff );
	pxTopOfStack--;

    *pxTopOfStack = 0;
    pxTopOfStack--;

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x00;	/* R0 */
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
	pxTopOfStack--;

    /* If we have an ATmega256x, we are also saving the EIND register.
     * We should default to 0.
     */
    *pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x00;    /* EIND */
    pxTopOfStack--;

    /* We are saving the RAMPZ register.
     * We should default to 0.
     */
    *pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x00;    /* RAMPZ */
    pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x00;	/* R1 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x02;	/* R2 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x03;	/* R3 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x04;	/* R4 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x05;	/* R5 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x06;	/* R6 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x07;	/* R7 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x08;	/* R8 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x09;	/* R9 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x10;	/* R10 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x11;	/* R11 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x12;	/* R12 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x13;	/* R13 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x14;	/* R14 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x15;	/* R15 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x16;	/* R16 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x17;	/* R17 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x18;	/* R18 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x19;	/* R19 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x20;	/* R20 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x21;	/* R21 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x22;	/* R22 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x23;	/* R23 */
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16 ) pvParameters;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) ( usAddress & ( uint16 ) 0x00ff );
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) ( usAddress & ( uint16 ) 0x00ff );
	pxTopOfStack--;

	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x26;	/* R26 X */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x27;	/* R27 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x28;	/* R28 Y */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x29;	/* R29 */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x30;	/* R30 Z */
	pxTopOfStack--;
	*pxTopOfStack = ( SchedullerHardwareInterface::StackType ) 0x031;	/* R31 */
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}


/* We require the address of the pxCurrentTCB variable, but don't want to know
any details of its type. */
extern volatile SchedullerHardwareInterface::TCB * volatile pxCurrentTCB;

/*-----------------------------------------------------------*/

/*
 * Macro to save all the general purpose registers, the save the stack pointer
 * into the TCB.
 *
 * The first thing we do is save the flags then disable interrupts.  This is to
 * guard our stack against having a context switch interrupt after we have already
 * pushed the registers onto the stack - causing the 32 registers to be on the
 * stack twice.
 *
 * r1 is set to zero as the compiler expects it to be thus, however some
 * of the math routines make use of R1.
 *
 * The interrupts will have been disabled during the call to portSAVE_CONTEXT()
 * so we need not worry about reading/writing to the stack pointer.
 */

#define portSAVE_CONTEXT()                                                              \
        __asm__ __volatile__ (  "push   __tmp_reg__                             \n\t"   \
                                "in     __tmp_reg__, __SREG__                   \n\t"   \
                                "cli                                            \n\t"   \
                                "push   __tmp_reg__                             \n\t"   \
                                "in     __tmp_reg__, 0x3B                       \n\t"   \
                                "push   __tmp_reg__                             \n\t"   \
                                "in     __tmp_reg__, 0x3C                       \n\t"   \
                                "push   __tmp_reg__                             \n\t"   \
                                "push   __zero_reg__                            \n\t"   \
                                "clr    __zero_reg__                            \n\t"   \
                                "push   r2                                      \n\t"   \
                                "push   r3                                      \n\t"   \
                                "push   r4                                      \n\t"   \
                                "push   r5                                      \n\t"   \
                                "push   r6                                      \n\t"   \
                                "push   r7                                      \n\t"   \
                                "push   r8                                      \n\t"   \
                                "push   r9                                      \n\t"   \
                                "push   r10                                     \n\t"   \
                                "push   r11                                     \n\t"   \
                                "push   r12                                     \n\t"   \
                                "push   r13                                     \n\t"   \
                                "push   r14                                     \n\t"   \
                                "push   r15                                     \n\t"   \
                                "push   r16                                     \n\t"   \
                                "push   r17                                     \n\t"   \
                                "push   r18                                     \n\t"   \
                                "push   r19                                     \n\t"   \
                                "push   r20                                     \n\t"   \
                                "push   r21                                     \n\t"   \
                                "push   r22                                     \n\t"   \
                                "push   r23                                     \n\t"   \
                                "push   r24                                     \n\t"   \
                                "push   r25                                     \n\t"   \
                                "push   r26                                     \n\t"   \
                                "push   r27                                     \n\t"   \
                                "push   r28                                     \n\t"   \
                                "push   r29                                     \n\t"   \
                                "push   r30                                     \n\t"   \
                                "push   r31                                     \n\t"   \
                                "lds    r26, pxCurrentTCB                       \n\t"   \
                                "lds    r27, pxCurrentTCB + 1                   \n\t"   \
                                "in     __tmp_reg__, __SP_L__                   \n\t"   \
                                "st     x+, __tmp_reg__                         \n\t"   \
                                "in     __tmp_reg__, __SP_H__                   \n\t"   \
                                "st     x+, __tmp_reg__                         \n\t"   \
                             );

/*
 * Opposite to portSAVE_CONTEXT().  Interrupts will have been disabled during
 * the context save so we can write to the stack pointer.
 */

#define portRESTORE_CONTEXT()                                                           \
        __asm__ __volatile__ (  "lds    r26, pxCurrentTCB                       \n\t"   \
                                "lds    r27, pxCurrentTCB + 1                   \n\t"   \
                                "ld     r28, x+                                 \n\t"   \
                                "out    __SP_L__, r28                           \n\t"   \
                                "ld     r29, x+                                 \n\t"   \
                                "out    __SP_H__, r29                           \n\t"   \
                                "pop    r31                                     \n\t"   \
                                "pop    r30                                     \n\t"   \
                                "pop    r29                                     \n\t"   \
                                "pop    r28                                     \n\t"   \
                                "pop    r27                                     \n\t"   \
                                "pop    r26                                     \n\t"   \
                                "pop    r25                                     \n\t"   \
                                "pop    r24                                     \n\t"   \
                                "pop    r23                                     \n\t"   \
                                "pop    r22                                     \n\t"   \
                                "pop    r21                                     \n\t"   \
                                "pop    r20                                     \n\t"   \
                                "pop    r19                                     \n\t"   \
                                "pop    r18                                     \n\t"   \
                                "pop    r17                                     \n\t"   \
                                "pop    r16                                     \n\t"   \
                                "pop    r15                                     \n\t"   \
                                "pop    r14                                     \n\t"   \
                                "pop    r13                                     \n\t"   \
                                "pop    r12                                     \n\t"   \
                                "pop    r11                                     \n\t"   \
                                "pop    r10                                     \n\t"   \
                                "pop    r9                                      \n\t"   \
                                "pop    r8                                      \n\t"   \
                                "pop    r7                                      \n\t"   \
                                "pop    r6                                      \n\t"   \
                                "pop    r5                                      \n\t"   \
                                "pop    r4                                      \n\t"   \
                                "pop    r3                                      \n\t"   \
                                "pop    r2                                      \n\t"   \
                                "pop    __zero_reg__                            \n\t"   \
                                "pop    __tmp_reg__                             \n\t"   \
                                "out    0x3C, __tmp_reg__                       \n\t"   \
                                "pop    __tmp_reg__                             \n\t"   \
                                "out    0x3B, __tmp_reg__                       \n\t"   \
                                "pop    __tmp_reg__                             \n\t"   \
                                "out    __SREG__, __tmp_reg__                   \n\t"   \
                                "pop    __tmp_reg__                             \n\t"   \
                             );


void SchedullerHardwareInterface::startScheduler( void )
{
	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );

	/* Should not get here. */
	return;
}

 __attribute__ ( ( naked ) ) void SchedullerHardwareInterface::contextSwitch(SchedullerHardwareInterface::TCB* next)
{
	portSAVE_CONTEXT();
	pxCurrentTCB = next;
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
}
